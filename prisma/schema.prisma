generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  color         String?   @default("#000000")
  accounts      Account[]
  grids         Grid[]
  sessions      Session[]
  squares       Square[]
  quarterWinners QuarterWinner[]
}

model Square {
  id         String    @id @default(uuid())
  x          Int
  y          Int
  ownerId    String?
  status     String
  gridId     String
  awayScore  String    @default("")
  homeScore  String    @default("")
  price      Int
  approvedAt DateTime?
  grid       Grid      @relation(fields: [gridId], references: [id])
  owner      User?     @relation(fields: [ownerId], references: [id])

  @@unique([gridId, x, y])
  @@index([x, y], map: "position_index")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Grid {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String?
  squarePrice Int      @default(5)
  randomizeQuarters Boolean @default(false)
  xScoreArr   String   @default("?")
  yScoreArr   String   @default("?")
  payoutQ1    Int      @default(25)
  payoutQ2    Int      @default(25)
  payoutQ3    Int      @default(25)
  payoutFinal Int      @default(25)
  isLocked    Boolean  @default(false)
  isSortedByScores Boolean @default(false)
  randomQ2 Boolean @default(false)
  randomQ3 Boolean @default(false)
  randomQ4 Boolean @default(false)
  createdAt   DateTime @default(now())
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     String
  squares     Square[]
  quarterWinners QuarterWinner[]
}

model GameData {
  id        String   @id @default(uuid())
  gameId    String   @default("superbowl2024")
  homeTeam  String
  awayTeam  String
  homeLogo  String
  awayLogo  String
  homeScore Int      @default(0)
  awayScore Int      @default(0)
  homeQ1    Int?
  homeQ2    Int?
  homeQ3    Int?
  homeQ4    Int?
  awayQ1    Int?
  awayQ2    Int?
  awayQ3    Int?
  awayQ4    Int?
  status    String   @default("pre")
  quarter   Int      @default(0)
  clock     String   @default("")
  gameDate  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([gameId])
}

model QuarterWinner {
  id        String   @id @default(uuid())
  gridId    String
  grid      Grid     @relation(fields: [gridId], references: [id])
  quarter   Int
  winnerId  String?
  winner    User?    @relation(fields: [winnerId], references: [id])
  awayScore String
  homeScore String
  createdAt DateTime @default(now())
  
  @@unique([gridId, quarter])
}
